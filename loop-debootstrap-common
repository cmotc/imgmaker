#! /bin/sh

if [ -f "$IMGMAKER_PACK_LIST" ]; then
        TEMP="$IMGMAKER_PACK_LIST"
        export IMGMAKER_PACK_LIST=$(cat "$TEMP")
fi

print_the_env(){
        echo "cwd                $IMGMAKER_CWD"
        echo "username           $IMGMAKER_USERNAME"
        echo "distro name        $IMGMAKER_DISTRO_NAME"
        echo "host name          $IMGMAKER_HOSTNAME"
        echo "package list       $IMGMAKER_PACK_LIST"
        echo "version name       $IMGMAKER_VERSION_NAME"
        echo "disk size          $IMGMAKER_DISK_SIZE"
        echo "disk name          $IMGMAKER_DISK_NAME"
        echo "u-boot name        $IMGMAKER_UBOOT_BIN"
        echo "device tree        $IMGMAKER_DEVICETREE_FILE"
        echo "debian codename    $IMGMAKER_CODENAME"
        echo "kernel directory   $IMGMAKER_KERNEL_DIR"
        echo "firmware directory $IMGMAKER_FIRMWARE_DIR"
        echo "zimage location    $IMGMAKER_ZIMAGE_PATH"
        echo "device tree path   $IMGMAKER_DEVICETREE_PATH"
        echo "boot directory     $IMGMAKER_BOOT_DIR"
        echo "build directory    $IMGMAKER_SYSTEM_DIR"
        echo "apt directory      $IMGMAKER_APT_DIR"
        echo "apt repos          $IMGMAKER_APT_SRCS_DIR"
        echo "apt preferences    $IMGMAKER_APT_PREF_DIR"
        echo "apt trusted repos  $IMGMAKER_APT_TRUST_DIR"
        echo "apt conf directory $IMGMAKER_APT_CONF_DIR"
        echo "uboot path         $IMGMAKER_UBOOT_PATH"
}

success_message(){
        echo "You have created an SD card image successfully in $IMGMAKER_CWD. The image
        file is named $IMGMAKER_DISK_NAME.img.

        Your username is $IMGMAKER_USERNAME.
        Your device is named $IMGMAKER_HOSTNAME.
        Your image is $IMGMAKER_DISK_SIZE bytes in size.

        It was based on the $CODENAME distribution of Debian.
        "
}

unmount_working_dirs(){
        [ -d $IMGMAKER_SYSTEM_DIR/dev ] && sudo umount -d $IMGMAKER_SYSTEM_DIR/dev/pts
        [ -d $IMGMAKER_SYSTEM_DIR/dev ] && sudo umount -d $IMGMAKER_SYSTEM_DIR/dev
        [ -d $IMGMAKER_SYSTEM_DIR/proc ] && sudo umount -d $IMGMAKER_SYSTEM_DIR/proc
	[ -d $IMGMAKER_SYSTEM_DIR/proc ] && sudo chroot $IMGMAKER_SYSTEM_DIR umount /proc
        [ -d $IMGMAKER_SYSTEM_DIR/sys ] && sudo umount -d $IMGMAKER_SYSTEM_DIR/sys
        [ -d $IMGMAKER_SYSTEM_DIR ] && sudo umount -d $IMGMAKER_SYSTEM_DIR
        [ -d $IMGMAKER_BOOT_DIR ] && sudo umount -d $IMGMAKER_BOOT_DIR
        [ -f /dev/loop0p1 ] && sudo umount -d /dev/loop0p1
        [ -f /dev/loop0p2 ] && sudo umount -d /dev/loop0p2
        sudo losetup -d /dev/loop2
	sudo losetup -d /dev/loop1
	sudo losetup -d /dev/loop0
	sudo losetup -D
}

recreate_working_dirs(){
        sudo rm -rf $IMGMAKER_SYSTEM_DIR $IMGMAKER_BOOT_DIR $IMGMAKER_CWD/sdbuild-* $IMGMAKER_CWD/*.img $IMGMAKER_CWD/*.img.last 1> logs/1remove.log 2> logs/1remove.err
        rm -rf $IMGMAKER_CWD/*.log* $IMGMAKER_CWD/*.err* 1> logs/11metaremove.log 2> logs/11metaremove.err
        sudo mkdir -p $IMGMAKER_SYSTEM_DIR $IMGMAKER_BOOT_DIR 1> logs/12recreate.log 2> logs/12recreate.err
}

create_empty_disk_image(){
        if [ ! -f $IMGMAKER_CWD/$IMGMAKER_DISK_NAME.img ]; then
                dd if=/dev/zero | pv -pert | dd of=$IMGMAKER_CWD/$IMGMAKER_DISK_NAME.img bs=512 count=$IMGMAKER_DISK_SIZE
                sudo losetup /dev/loop0 $IMGMAKER_CWD/$IMGMAKER_DISK_NAME.img 1> logs/20loopset.log 2> logs/20loopset.err
        fi
}

write_uboot_to_first(){
        echo $IMGMAKER_UBOOT_PATH
        sudo dd if=$IMGMAKER_UBOOT_PATH of=/dev/loop0 bs=1024 seek=8 && echo "wrote $IMGMAKER_UBOOT_PATH" 1> logs/30writeuboot.log 2> logs/30writeuboot.err
}

create_partitions_for_image(){
        echo "o
n
p
1
2048
+16M
n
p
2
34816

a
1
p
w" | sudo fdisk /dev/loop0
}

setup_partitions_for_image(){
        sudo partprobe
        sudo losetup -fs -o 1048576 --sizelimit 17825792 /dev/loop1 /dev/loop0 1> logs/40loop1.log 2> logs/40loop1.err
        sudo losetup -fs -o 17825792 /dev/loop2 /dev/loop0 1> logs/40loop2.log 2> logs/40loop2.err

        sudo mkfs.vfat /dev/loop1 1> logs/41bootfs.log 2> logs/41bootfs.err
        sudo mount -t vfat /dev/loop1 $IMGMAKER_BOOT_DIR 1> logs/41bootmount.log 2> logs/41bootmount.err

        if [ "$IMGMAKER_ARCH_SUPPORTS_64FS" = "YES" ]; then
                exit 1
                sudo mkfs.ext4 /dev/loop2 1> logs/42rootfs64.log 2> logs/42rootfs64.err
        else
                echo "Using mke2fs.conf at $MKE2FS_CONFIG" 1> logs/42rootfsmod.log 2> logs/42rootfsmod.err
                sudo mkfs.ext4 -O ^64bit ^metadata_csum /dev/loop2 1> logs/42rootfs.log 2> logs/42rootfs.err
        fi
        sudo fsck.ext4 -p -b 32768 /dev/loop2 1> logs/43rootcheck.log 2> logs/43rootcheck.err
        sudo mount -o loop -t ext4 /dev/loop2 $IMGMAKER_SYSTEM_DIR 1> logs/43rootmount.log 2> logs/43rootmount.err
}

img_debootstrap(){
        if [ -z "$IMGMAKER_KEYRING_PRIVATE" ]; then
                if [ -f $IMGMAKER_CACHE ]; then
                        if [ -z "$IMGMAKER_KEYRING_PUBLIC" ]; then
                                sudo qemu-debootstrap --keyring=$IMGMAKER_KEYRING_PUBLIC --include=$IMGMAKER_DEFAULT_PACKAGES \
                                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                        --variant=$IMGMAKER_VARIANT --force-check-gpg \
                                        --unpack-tarball=$IMGMAKER_CACHE --private-key=$IMGMAKER_PRIVATE_KEY \
                                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                        else
                                sudo qemu-debootstrap --include=$IMGMAKER_DEFAULT_PACKAGES \
                                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                        --variant=$IMGMAKER_VARIANT $IMGMAKER_CHECK_GPG \
                                        --unpack-tarball=$IMGMAKER_CACHE --private-key=$IMGMAKER_PRIVATE_KEY \
                                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                        fi
                else
                        if [ -z "$IMGMAKER_KEYRING_PUBLIC" ]; then
                                sudo qemu-debootstrap --keyring=$IMGMAKER_KEYRING_PUBLIC --include=$IMGMAKER_DEFAULT_PACKAGES \
                                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                        --variant=$IMGMAKER_VARIANT --force-check-gpg \
                                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                        else
                                sudo qemu-debootstrap --include=$IMGMAKER_DEFAULT_PACKAGES \
                                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                        --variant=$IMGMAKER_VARIANT $IMGMAKER_CHECK_GPG \
                                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                        fi
                fi
        else
                if [ -f $IMGMAKER_CACHE ]; then
                        if [ -z "$IMGMAKER_KEYRING_PUBLIC" ]; then
                                sudo qemu-debootstrap --keyring=$IMGMAKER_KEYRING_PUBLIC --include=$IMGMAKER_DEFAULT_PACKAGES \
                                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                        --variant=$IMGMAKER_VARIANT --force-check-gpg \
                                        --unpack-tarball=$IMGMAKER_CACHE \
                                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                        else
                                sudo qemu-debootstrap --include=$IMGMAKER_DEFAULT_PACKAGES \
                                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                        --variant=$IMGMAKER_VARIANT $IMGMAKER_CHECK_GPG \
                                        --unpack-tarball=$IMGMAKER_CACHE \
                                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                        fi
                else
                        if [ -z "$IMGMAKER_KEYRING_PUBLIC" ]; then
                                sudo qemu-debootstrap --keyring=$IMGMAKER_KEYRING_PUBLIC --include=$IMGMAKER_DEFAULT_PACKAGES \
                                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                        --variant=$IMGMAKER_VARIANT --force-check-gpg \
                                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                        else
                                sudo qemu-debootstrap --include=$IMGMAKER_DEFAULT_PACKAGES \
                                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                        --variant=$IMGMAKER_VARIANT $IMGMAKER_CHECK_GPG \
                                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                        fi
                fi
        fi
}

cache_debootstrap_system(){
        if [ -z "$IMGMAKER_KEYRING_PRIVATE" ]; then
                if [ -z "$IMGMAKER_KEYRING_PUBLIC" ]; then
                        sudo qemu-debootstrap --keyring=$IMGMAKER_KEYRING_PUBLIC --include=$IMGMAKER_DEFAULT_PACKAGES \
                                --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                --variant=$IMGMAKER_VARIANT --force-check-gpg \
                                --make-tarball=$IMGMAKER_CACHE --private-key=$IMGMAKER_PRIVATE_KEY \
                                --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                else
                        sudo qemu-debootstrap --include=$IMGMAKER_DEFAULT_PACKAGES \
                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                        --variant=$IMGMAKER_VARIANT $IMGMAKER_CHECK_GPG \
                        --make-tarball=$IMGMAKER_CACHE --private-key=$IMGMAKER_PRIVATE_KEY \
                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                fi
        else
                if [ -z "$IMGMAKER_KEYRING_PUBLIC" ]; then
                        sudo qemu-debootstrap --keyring=$IMGMAKER_KEYRING_PUBLIC --include=$IMGMAKER_DEFAULT_PACKAGES \
                                --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                                --variant=$IMGMAKER_VARIANT --force-check-gpg \
                                --make-tarball=$IMGMAKER_CACHE \
                                --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                else
                        sudo qemu-debootstrap --include=$IMGMAKER_DEFAULT_PACKAGES \
                        --exclude=$IMGMAKER_EXCLUDED_PACKAGES --components=$IMGMAKER_COMPONENTS \
                        --variant=$IMGMAKER_VARIANT $IMGMAKER_CHECK_GPG \
                        --make-tarball=$IMGMAKER_CACHE \
                        --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
                fi
        fi
}

setup_system_partition(){
        export LANG=C
        export LANG=en_US.UTF-8
        sudo qemu-debootstrap --keyring=$IMGMAKER_KEYRING_PUBLIC --include=$IMGMAKER_DEFAULT_PACKAGES --arch=$ARCH $IMGMAKER_CODENAME $IMGMAKER_SYSTEM_DIR $SYSTEM_MIRROR
        #sudo umount $IMGMAKER_SYSTEM_DIR/proc
	#sudo mount -t  dev --bind /dev $IMGMAKER_SYSTEM_DIR/dev
#        sudo chroot $IMGMAKER_SYSTEM_DIR mount proc /proc -t proc
        #rm -rf $IMGMAKER_CWD/sdpts $IMGMAKER_CWD/sdsys $IMGMAKER_CWD/sddev
        #mkdir $IMGMAKER_CWD/sdpts $IMGMAKER_CWD/sdsys $IMGMAKER_CWD/sddev
        #sudo mount -t devtmpfs $IMGMAKER_CWD/sddev $IMGMAKER_SYSTEM_DIR/dev || sudo mount --bind /dev $IMGMAKER_SYSTEM_DIR/dev
	#sudo mount --bind $IMGMAKER_CWD/chpts $BUILDIR/dev/pts -t devpts
	#sudo mount --bind $IMGMAKER_CWD/chsys $IMGMAKER_SYSTEM_DIR/sys -t sysfs
        sudo cp /etc/resolv.conf $IMGMAKER_SYSTEM_DIR/etc/resolv.conf
        sudo mkdir -p $IMGMAKER_APT_PREF_DIR
        sudo mkdir -p $IMGMAKER_APT_CONF_DIR
        sudo mkdir -p $IMGMAKER_APT_TRUST_DIR
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get update
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get dist-upgrade -y
        #sudo chroot $IMGMAKER_SYSTEM_DIR /bin/bash -c "debconf-set-selections <<< 'locales/locales_to_be_generated select $GENERATE_LOCALE'"
        #sudo chroot $IMGMAKER_SYSTEM_DIR /bin/bash -c "debconf-set-selections <<< 'locales locales/default_environment_locale select $DEFAULT_LOCALE'"
        sudo chroot $IMGMAKER_SYSTEM_DIR rm -fv /etc/default/locale
        #sudo chroot $IMGMAKER_SYSTEM_DIR dpkg-reconfigure -frontend=Noninteractive locales
        for i in $(find $IMGMAKER_HOOK_DIR -name *.d.sh); do
                . $i > $i.log
        done
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get update
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get dist-upgrade -y
        sudo cp $IMGMAKER_KERNEL_DIR/*.deb $IMGMAKER_SYSTEM_DIR/home
        sudo chroot $IMGMAKER_SYSTEM_DIR bash -c 'dpkg -i /home/*.deb'
        #sudo chroot $IMGMAKER_SYSTEM_DIR apt-get clean
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get update
        #sudo chroot $IMGMAKER_SYSTEM_DIR /bin/bash -c "debconf-set-selections <<< 'keyboard-configuration/variant: $KEYBOARD_LOCALE'"
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get install -t sid e2fsprogs e2fsck-static xserver-xorg-input-multitouch x11-touchscreen-calibrator xdm -y
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get install gsl1680 -y
	sudo chroot $IMGMAKER_SYSTEM_DIR dpkg-reconfigure xdm
        #sudo chroot $IMGMAKER_SYSTEM_DIR apt-get clean
        #sudo chroot $IMGMAKER_SYSTEM_DIR apt-get
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get install $IMGMAKER_PACK_LIST -y
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get clean
        #sudo chroot $IMGMAKER_SYSTEM_DIR dpkg-reconfigure -frontend=Noninteractive keyboard-configuration
        echo "
        none            /tmp        tmpfs   defaults,noatime,mode=1777        0       0
        /dev/mmcblk0p1  /           ext4    relatime,errors=remount-ro        0       0
        " | sudo tee -a $IMGMAKER_SYSTEM_DIR/etc/fstab

        echo "
        127.0.0.1 localhost
        127.0.1.1 $IMGMAKER_HOSTNAME

        # The following lines are desirable for IPv6 capable hosts
        ::1     ip6-localhost ip6-loopback
        fe00::0 ip6-localnet
        ff00::0 ip6-mcastprefix
        ff02::1 ip6-allnodes
        ff02::2 ip6-allrouters
        ff02::3 ip6-allhosts
        " | sudo tee $IMGMAKER_SYSTEM_DIR/etc/hosts

        echo "
        ######################################################################
        # /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)
        # See the interfaces(5) manpage for information on what options are
        # available.
        ######################################################################

        # We always want the loopback interface.
        #
        auto lo
        iface lo inet loopback

        # To use dhcp:
        #
        # auto eth0
        # iface eth0 inet dhcp

        # An example static IP setup: (broadcast and gateway are optional)
        #
        # auto eth0
        # iface eth0 inet static
        #     address 192.168.0.42
        #     network 192.168.0.0
        #     netmask 255.255.255.0
        #     broadcast 192.168.0.255
        #     gateway 192.168.0.1

        auto wlan
        iface wlan0 inet dhcp

        # An example static IP setup: (broadcast and gateway are optional)
        #
        # auto wlan0
        # iface wlan0 inet static
        #     address 192.168.0.42
        #     network 192.168.0.0
        #     netmask 255.255.255.0
        #     broadcast 192.168.0.255
        #     gateway 192.168.0.1
        " | sudo tee $IMGMAKER_SYSTEM_DIR/etc/network/interfaces
        echo "export HOME=/root
/usr/bin/xvkbd -xdm -geometry 1024x300+0+300 & " | sudo tee -a $IMGMAKER_SYSTEM_DIR/etc/X11/xdm/Xsetup
        echo "/usr/bin/pkill xvkbd & " | sudo tee -a $IMGMAKER_SYSTEM_DIR/etc/X11/xdm/Xstartup
        sudo mkdir -p $IMGMAKER_SYSTEM_DIR/lib/firmware
        sudo cp -Rv $IMGMAKER_FIRMWARE_DIR/* $IMGMAKER_SYSTEM_DIR/lib/firmware
        sudo chroot $IMGMAKER_SYSTEM_DIR update-rc.d igslx680 defaults
        sudo chroot $IMGMAKER_SYSTEM_DIR update-rc.d igslx680 enable
        echo "$IMGMAKER_HOSTNAME" | sudo tee $IMGMAKER_SYSTEM_DIR/etc/hostname
}

select_dtb(){
        #!/bin/bash
        let i=0 # define counting variable
        W=() # define working array
        while read -r line; do # process file by file
                let i=$i+1
                W+=($i "$line")
        done < <( \ls -1 $IMGMAKER_DEVICETREE_DIR )
        export IMGMAKER_DEVICETREE_FILE=$(dialog --title "Select your Device Tree from the following" --menu "Chose one" 30 78 17 "${W[@]}" 3>&2 2>&1 1>&3)
        clear
        export IMGMAKER_DEVICETREE_PATH="$IMGMAKER_DEVICETREE_DIR/$IMGMAKER_DEVICETREE_FILE"
}

setup_boot_partition(){
        if [ "$IMGMAKER_USE_INITRD" = "YES" ]; then
                sudo cp $IMGMAKER_SYSTEM_DIR/boot/*initrd.img* $IMGMAKER_BOOT_DIR/
        fi
        INITRD_TMP=$(\ls $IMGMAKER_BOOT_DIR/*initrd.img* | sed s_"$IMGMAKER_BOOT_DIR"__ | tr -d \/)
        IMGMAKER_DEVICETREE_FILE_CLEAN=$(echo $IMGMAKER_DEVICETREE_FILE | tr -d "/")
        echo "fatload mmc 0 0x44000000 zImage" | tee $IMGMAKER_CWD/boot.cmd
        INITRD_LOC="-"
        [ -z "$INITRD_TMP" ] && [ -f "$IMGMAKER_BOOT_DIR/$INITRD_TMP" ] && INITRD_LOC="0x47000000" && echo "fatload mmc 0 $INITRD_LOC $INITRD_TMP" | tee -a $IMGMAKER_CWD/boot.cmd && USE_INITRD="initrd=$INITRD_LOC"
        [ -z "$IMAGEMAKER_DEVICETREE_FILE_CLEAN" ] && echo "fatload mmc 0 0x49000000 $IMGMAKER_DEVICETREE_FILE_CLEAN" | tee -a $IMGMAKER_CWD/boot.cmd
        echo "setenv bootargs console=tty1,115200 earlyprintk root=/dev/mmcblk0p2 $USE_INITRD rootwait panic=10" | tee -a $IMGMAKER_CWD/boot.cmd
        echo "bootz 0x44000000 $INITRD_LOC 0x49000000 " | tee -a $IMGMAKER_CWD/boot.cmd
        mkimage -C none -A arm -T script -d boot.cmd boot.scr
        sudo mv $IMGMAKER_CWD/boot.scr $IMGMAKER_BOOT_DIR/
        sudo cp $IMGMAKER_ZIMAGE_PATH $IMGMAKER_BOOT_DIR
        sudo cp -v $IMGMAKER_DEVICETREE_PATH $IMGMAKER_BOOT_DIR
        sudo cp $IMGMAKER_CWD/boot.cmd $IMGMAKER_BOOT_DIR/
        rm $IMGMAKER_CWD/boot.cmd
}

setup_user(){
        sudo chroot $IMGMAKER_SYSTEM_DIR adduser --disabled-password --shell /bin/dash --home /home/$IMGMAKER_USERNAME $IMGMAKER_USERNAME
        sudo chroot $IMGMAKER_SYSTEM_DIR bash -c "echo $IMGMAKER_USERNAME:$PASSWORD | chpasswd"
        echo "
        /usr/bin/xvkbd -geometry 1024x300+0+300 &
        " | tee -a $IMGMAKER_SYSTEM_DIR/home/$IMGMAKER_USERNAME/.xsession
        sudo chroot $IMGMAKER_SYSTEM_DIR apt-get update
        #sudo chroot $IMGMAKER_SYSTEM_DIR apt-get dist-upgrade -y
        #sudo chroot $IMGMAKER_SYSTEM_DIR apt-get clean
}

chroot_enter(){
        sudo chroot $IMGMAKER_SYSTEM_DIR
}
